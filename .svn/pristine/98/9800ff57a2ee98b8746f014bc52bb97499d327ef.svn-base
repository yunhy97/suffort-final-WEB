package com.sample.web.Handler;


import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Set;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.web.socket.BinaryMessage;
import org.springframework.web.socket.CloseStatus;
import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketSession;
import org.springframework.web.socket.handler.TextWebSocketHandler;

import com.google.gson.Gson;
import com.sample.dao.UserDao;
import com.sample.service.CommunityService;
import com.sample.service.UserService;
import com.sample.service.UserServiceImpl;
import com.sample.web.dto.CommunityCntDto;
import com.sample.web.dto.CommunityContentDetail;
import com.sample.web.dto.CommunityGuestDetail;
import com.sample.web.dto.CommunityTagsDto2;
import com.sample.web.vo.Communities;
import com.sample.web.vo.CommunityContents;
import com.sample.web.vo.CommunityGuests;
import com.sample.web.vo.CommunityTags;
import com.sample.web.vo.Users;


@Component
public class SocketHandler extends TextWebSocketHandler{
	// 실시간 활성화된 방의 정보를 저장해두는 Map
	// 구조 => communitiesNo < userNo , session >
	HashMap<Long, HashMap<Long, WebSocketSession>> activedCommunities = new HashMap<>();
	
	@Autowired
	CommunityService communityService;
	
	@Autowired
	UserService userService;
	
	Gson gson = new Gson();
	
	// 파일 업로드용
	private static final String FILE_UPLOAD_PATH = "C:/APP/";
	static int fileUploadIdx = 0;
	static String fileUploadSession = "";
	
	
	
	/*
	 * 소켓과 연결과 동시에 실행되는 메소드
	 * @see org.springframework.web.socket.handler.AbstractWebSocketHandler#afterConnectionEstablished(org.springframework.web.socket.WebSocketSession)
	 */
	@SuppressWarnings({"unchecked"})
	@Override
	public void afterConnectionEstablished(WebSocketSession session) throws Exception {
		System.out.println("----- afterConnectionEstablished() 실행 -----");		
		// 커뮤니티 번호, 유저번호, 세션번호 획득
		String getQueryString = session.getUri().toString().split("/inside/")[1];
		long communityNo = Long.parseLong(getQueryString.split("&")[0]);
		long userNo = Long.parseLong(getQueryString.split("&")[1]);		
		//String sessionId = session.getId();

		// @@해결하기@@
		// url조작을 통해서 방에 접속하는것을 방지하기 위해 해당 inside접근시 브라우저의 session과 url의 userNo를 반드시 대조할것(요건 공동 해결)
		// url조작을 통해서 암호화된 방 접속을 방지하기 위해 inside페이지 랜딩시 검증방법을 강구할 것!!(이건 내가 해결)
		
		// 방의 존재여부 검증 및 해당 방의 참여자 정보 등록, 조회, 반환
		Communities communities = communityService.getCommunityByNo(communityNo);
		if(communities == null) {
			// 방지 존재하지 않음 => 에러메시지 브라우저에 전송 (type : err) // 잘못된 경로로 접근(url직접입력과 같은..)
			// JSON객체에 err메세지 담아서 보내주기???
			JSONObject obj = new JSONObject();		
			obj.put("type", "close");
			session.sendMessage(new TextMessage(gson.toJson(obj)));
			return;
		}
		
		// 테이블에 커뮤니티 접속정보 검사
		// @@ guest에 유저상세정보를 함께 내려주기
		List<CommunityGuestDetail> guests = communityService.getComGuestByNo(communityNo);
		
		// 커뮤니티 입장시 comguest actived_date 날짜 현재시간으로 업데이트
		CommunityGuests communityGuests = communityService.getCommunityGuestsByNo(communityNo, userNo);
		communityService.updateComGuestActivedDate(communityGuests);
		
		// activedRoom에 방번호(키)로 유저번호,웹소켓세션(벨류) 저장
		if(activedCommunities.containsKey(communityNo)) { 
			// 활성화된방
			HashMap<Long, WebSocketSession> activedCommunityByNo = activedCommunities.get(communityNo);
			// 이미 접속한 유저가 같은방에 중복으로 접속을 시도할 경우
			if(activedCommunityByNo.containsKey(userNo)) {
				JSONObject obj = new JSONObject();		
				obj.put("type", "close");
				session.sendMessage(new TextMessage(gson.toJson(obj)));
				return;
			}
			activedCommunityByNo.put(userNo, session);
		} else {
			// 비활성화된방
			HashMap<Long, WebSocketSession> userInfo = new HashMap<>();
			userInfo.put(userNo, session);
			activedCommunities.put(communityNo, userInfo);
		}
		// 브라우저로 값 내려주기
		// 커뮤니티 정보(명단, 타이틀 등), 웹소켓아이디, 기존컨텐츠
		List<CommunityContentDetail> contents = communityService.getComContentDetailByNo(communityNo);
		
		// 커뮤니티 태그 정보
		List<CommunityTagsDto2> tags = communityService.getComTagsByNo(communityNo);
			
		// 해당 웹소켓세션(연결된 브라우저)이 소속된 모든 방의 정보(커뮤니티, 신규 컨텐츠 개수)를 브라우저로 전송한다. 
		// @@@@@@ 수정해야함 => 소속된 모든 세션에게 전달할것 @@@@@@
		List<CommunityCntDto> allCommunityAndNewContentsCnts = communityService.getNewContentCntByUserNo(userNo);
		System.out.println("allCommunityAndNewContentsCnts : "+ allCommunityAndNewContentsCnts);
		
		JSONObject obj = new JSONObject();		
		obj.put("type", "connect");
		obj.put("community", communities);
		obj.put("sessionId", session.getId());
		obj.put("communityGuests", guests);
		obj.put("contents", contents);	
		obj.put("myCommuAndNewContentsCnt", allCommunityAndNewContentsCnts);
		obj.put("tags", tags);
		
		// @@@@@@@@@@@@@@@ 유저가 참여중인 모든 커뮤니티 리스트 조회 및 반환
		// DTO생성해야함 => 방번호, 유저번호, 권한, 방참여날짜 // 방타이틀, 방사진, 방 등록날짜, 방range, 방intro  
	
		// 활성화된 방에서 해당방의 모든  유저 조회
		HashMap<Long, WebSocketSession> usersInCom = activedCommunities.get(communityNo);
		
		// 출력을 위한 키셋 획득
		Set<Long> keySet = usersInCom.keySet();
		
		// 방에 접속한 모든 유저 정보중에서 접속된 유저만 뽑아서 currentUser 리스트에 담아 반환한다.
		List<CommunityGuestDetail> currentUser = new ArrayList<CommunityGuestDetail>();
		for (Long current : keySet) {
			for(CommunityGuestDetail saved : guests) {
				if(current == saved.getUserNo()) {
					currentUser.add(saved);
				}
			}
		}
		obj.put("currentUser", currentUser);
		
		System.out.println("activedCom : " + activedCommunities);
		System.out.println("usersInCom :" + usersInCom);
		System.out.println("currentUser :" + currentUser);
		
		// 키로 세션하나씩 꺼내서 메세지 전송
		for (Long s : keySet) {
			WebSocketSession userSession = usersInCom.get(s);
			userSession.sendMessage(new TextMessage(gson.toJson(obj)));
		}
		
		// 해당 유저가 참여중인 방의 정보 전송 (사이드바)
	}
	
	
	
	
	/*
	 * 브라우저로부터 텍스트 값을 받을 때 실행
	 * @see org.springframework.web.socket.handler.AbstractWebSocketHandler#handleTextMessage(org.springframework.web.socket.WebSocketSession, org.springframework.web.socket.TextMessage)
	 */
	@SuppressWarnings("unchecked")
	@Override
	protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception {
		super.handleTextMessage(session, message);
		// JSON 형태의 String 메세지를 받는다.
		String data = message.getPayload();
		
		// JSON 데이터를 JSONObject로 파싱한다.
		JSONObject object = jsonToObjectParser(data);
		
		// 타입체크용
		long communityNo = Long.parseLong((String) object.get("communityNo"));
		
		// @@@@@@@@@@@@@@@@@@@@@@@ long으로 넘어오는게 문제내...
		
		String type = (String) object.get("type");
		
		if("message".equals(type)) {
			String msg = (String) object.get("msg");
			long userNo = Long.parseLong((String) object.get("userNo"));
			
			// 텍스트내용 db 저장 (contents 등록, 방금등록한 contents번호 조회,  writing등록)
			// 저장후 커뮤니티컨텐츠 번호를 반환받는다.
			long comContentNo = communityService.addContent(communityNo, userNo, msg);
			
			// 등록한 커뮤니티컨텐츠를 조회
			CommunityContents newCommunityContents = communityService.getComContentByNo(comContentNo);
			Date registeredDate = newCommunityContents.getRegisteredDate();
			// 조회한 커뮤니티컨텐츠의 등록날짜 정보를 object에 담는다.	
			object.put("registeredDate", registeredDate);
			
			// 문자열(Writings) 라는걸 알려주기
			object.put("mainValue", "Writings");
			
			
			// 새로추가 => 컨텐츠 디테일 정보
			CommunityContentDetail communityContentDetail = communityService.getComContentDetailByNo(communityNo, comContentNo);
			System.out.println("<test> CommunityContentDetail : " + communityContentDetail);
			object.put("contents", communityContentDetail);
			
			// 새로추가 => 유저정보
			Users users = userService.getUsersDetailByNo(userNo);
			System.out.println("<test> users : " + users);
			object.put("users", users);
			
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////
			// activedCommunity에 참여중인 유저중에서 
			// 방금 등록한 커뮤니티에 참여중인 유저 조회 
			List<CommunityGuestDetail> guestsInCommu = communityService.getComGuestByNo(communityNo);
			HashMap<Long, WebSocketSession> updateSideList = new HashMap<Long, WebSocketSession>();
			// 활동중인 모든 커뮤니티 조회
			for(Long key : activedCommunities.keySet()) {
				// 해당 커뮤니티의 유저 조회
				for(Long activedUserNo : activedCommunities.get(key).keySet()) {
					// 방금 새로 등록된 커뮤니티에 참여중인 유저 조회
					for(CommunityGuestDetail guestInCommu : guestsInCommu) {
						// 활동중인 유저가 새로등로된 커뮤니티에 참여중인지 검사
						if(guestInCommu.getUserNo() == activedUserNo) {
							updateSideList.put(activedUserNo, activedCommunities.get(key).get(activedUserNo));
						}
					}
				}
			}
			// 조회된 유저들에게 업데이트된 myCommuAndNewContentsCnt조회해서 보내준다. 
			for(Long targetUserNo : updateSideList.keySet()) {
				JSONObject obj = new JSONObject();		
				obj.put("type", "myCommuNewContents");
				obj.put("myCommuAndNewContentsCnt", communityService.getNewContentCntByUserNo(targetUserNo));
				updateSideList.get(targetUserNo).sendMessage(new TextMessage(gson.toJson(obj)));
			}
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////
			
			// activedCommunities 조회해서 같은방에 있는 모든 웹세센에 내용 내려주기
			HashMap<Long, WebSocketSession> usersInCom = activedCommunities.get(communityNo);
			Set<Long> keySet = usersInCom.keySet();
			
			// 키로 세션 하나씩 꺼내서 메세지 전송
			for (Long s : keySet) {
				WebSocketSession userSession = usersInCom.get(s);
				userSession.sendMessage(new TextMessage(gson.toJson(object)));
			}
			
			
			
		} else if ("update".equals(type)) {
			System.out.println("--- 'update'타입 진입 ---");
			long bjNo = Long.parseLong((String) object.get("bjNo"));
			String communityPassword = (String) object.get("communityPassword");
			String communityIntro = (String) object.get("communityIntro");
			String communityTitle = (String) object.get("communityTitle");
			
			// 기존 커뮤니티 정보 가져오기
			Communities communities = new Communities();
			communities.setNo(communityNo);
			communities.setUserNo(bjNo);
			communities.setPassword(communityPassword);
			communities.setIntro(communityIntro);
			communities.setTitle(communityTitle);
					
			Boolean isSuccess = communityService.updateCommunityByNo(communities);
			
			// 업데이트 실패 (방장이아닌 유저가 업데이트 요청)
			if(!isSuccess) {
				System.out.println(" --- 너 방장 아니잖아?! --- ");
				object.clear();
				object.put("type", "update");
				object.put("status", "error");
				session.sendMessage(new TextMessage(gson.toJson(object)));
			}
			// 업데이트 성공
			// 방금업데이트한 정보를 조회해서 object에 담기
			Communities updatedCommunity = communityService.getCommunityByNo(communityNo);
			object.put("type", "update");
			object.put("status", "success");
			object.put("community", updatedCommunity);
			
			// 해당방에 접속중인 모든 유저에게 업데이트 정보 전송
			HashMap<Long, WebSocketSession> usersInCom = activedCommunities.get(communityNo);
			Set<Long> keySet = usersInCom.keySet();
			
			// 키로 세션 하나씩 꺼내서 메세지 전송
			for (Long s : keySet) {
				WebSocketSession userSession = usersInCom.get(s);
				userSession.sendMessage(new TextMessage(gson.toJson(object)));
			}
			
			
			
		} else if ("fileUpload".equals(type)) {
			long userNo = Long.parseLong((String)object.get("userNo"));
			long contentNo = Long.parseLong((String)object.get("contentNo"));
			
			// 컨텐츠번호로 파일이름을 불러오기
			CommunityContentDetail communityContentDetail = communityService.getComContentDetailByNo(communityNo, contentNo);
			
			// 파일 타입을 구별하고, 이름을 사용자가 등록했을때로 돌려준다.
			if(null != communityContentDetail.getCommunityImgs()) {
				//communityContentDetail.getCommunityImgs().setName(communityContentDetail.getCommunityImgs().getName().substring(17));
				object.put("mainValue", "Images");
			} else if (null != communityContentDetail.getCommunityFiles()) {
				//communityContentDetail.getCommunityFiles().setName(communityContentDetail.getCommunityFiles().getName().substring(17));
				object.put("mainValue", "Files");
			};
			
			object.put("contents", communityContentDetail);		
			
			
			// 해당 커뮤니티의 웹소켓세션에게 파일 내려주기 
			HashMap<Long, WebSocketSession> usersInCom = activedCommunities.get(communityNo);
			Set<Long> keySet = usersInCom.keySet();
			
			String toString = gson.toJson(object);
			
			// 키로 세션 하나씩 꺼내서 메세지 전송
			for (Long s : keySet) {
				WebSocketSession userSession = usersInCom.get(s);
				userSession.sendMessage(new TextMessage(toString));
			}
			
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////
			// activedCommunity에 참여중인 유저중에서 
			// 방금 등록한 커뮤니티에 참여중인 유저 조회 
			List<CommunityGuestDetail> guestsInCommu = communityService.getComGuestByNo(communityNo);
			HashMap<Long, WebSocketSession> updateSideList = new HashMap<Long, WebSocketSession>();
			// 활동중인 모든 커뮤니티 조회
			for(Long key : activedCommunities.keySet()) {
				// 해당 커뮤니티의 유저 조회
				for(Long activedUserNo : activedCommunities.get(key).keySet()) {
					// 방금 새로 등록된 커뮤니티에 참여중인 유저 조회
					for(CommunityGuestDetail guestInCommu : guestsInCommu) {
						// 활동중인 유저가 새로등로된 커뮤니티에 참여중인지 검사
						if(guestInCommu.getUserNo() == activedUserNo) {
						updateSideList.put(activedUserNo, activedCommunities.get(key).get(activedUserNo));
						}
					}
				}
			}
			// 조회된 유저들에게 업데이트된 myCommuAndNewContentsCnt조회해서 보내준다. 
			for(Long targetUserNo : updateSideList.keySet()) {
			JSONObject obj = new JSONObject();		
			obj.put("type", "myCommuNewContents");
			obj.put("myCommuAndNewContentsCnt", communityService.getNewContentCntByUserNo(targetUserNo));
			obj.put("communityNo", communityNo);
			updateSideList.get(targetUserNo).sendMessage(new TextMessage(gson.toJson(obj)));
			}
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////
			
		} else if ("depart".equals(type)) { // 방탈퇴 기능
			long userNo = Long.parseLong((String) object.get("userNo"));
			// 유저 삭제
			String commnityActived = communityService.deleteUserFromComGuest(communityNo, userNo);
			
			// 커뮤니티 방이 여전히 존재하는 경우
			if ("N".equals(commnityActived)) {
				// 해당 방의 유저조회
				List<CommunityGuestDetail> guests = communityService.getComGuestByNo(communityNo);
				
				// 활성화 커뮤니티 명단에서 해당 유저 제외
				HashMap<Long, WebSocketSession> usersInCom = activedCommunities.get(communityNo);
				usersInCom.remove(userNo);
				object.clear();
				object.put("type", "remove");
				object.put("communityGuests", guests);
				
				// 방에 접속한 모든 유저 정보중에서 접속된 유저만 뽑아서 currentUser 리스트에 담아 반환한다.
				List<CommunityGuestDetail> currentUser = new ArrayList<CommunityGuestDetail>();
				for (Long current : usersInCom.keySet()) {
					for(CommunityGuestDetail saved : guests) {
						System.out.println(" 세션 제거 후 userNo : " + saved.getUserNo());
						if(current == saved.getUserNo()) {
							currentUser.add(saved);
						}
					}
				}
				object.put("currentUser", currentUser);
				
				String toString = gson.toJson(object);
				
				// 키로 세션하나씩 꺼내서 메세지 전송
				for (Long s : usersInCom.keySet()) {
					WebSocketSession userSession = usersInCom.get(s);
					userSession.sendMessage(new TextMessage(toString));
				}
			} else {
				// 커뮤니티 방 삭제됨
			}
		} else if ("imageUpdate".equals(type)) {
			//String imageName = (String)object.get("imageName");
			
			// 해당 커뮤니티의 웹소켓세션에게 파일 내려주기 
			HashMap<Long, WebSocketSession> usersInCom = activedCommunities.get(communityNo);
			Set<Long> keySet = usersInCom.keySet();
			
			String toString = gson.toJson(object);
			
			// 키로 세션 하나씩 꺼내서 메세지 전송
			for (Long s : keySet) {
				WebSocketSession userSession = usersInCom.get(s);
				userSession.sendMessage(new TextMessage(toString));
			}
		} else if ("tagUpdate".equals(type)) {
			System.out.println("object : " + object.get("tagNoList"));
			List<Long> tagNoList = (List<Long>) object.get("tagNoList");
			// 태그 업데이트
			communityService.updateCommunityTagByNo(communityNo, tagNoList);
			// 태그 정보 브라우저에 전송
			HashMap<Long, WebSocketSession> usersInCom = activedCommunities.get(communityNo);
			Set<Long> keySet = usersInCom.keySet();
			
			String toString = gson.toJson(object);
			
			// 키로 세션 하나씩 꺼내서 메세지 전송
			for (Long s : keySet) {
				WebSocketSession userSession = usersInCom.get(s);
				userSession.sendMessage(new TextMessage(toString));
			}
		}
	}
	
	
	
	/**
	 * 소켓과 연결이 끊길때 실행
	 */
	@SuppressWarnings({ "unused", "unchecked" })
	@Override
	public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {
		// TODO Auto-generated method stub
		super.afterConnectionClosed(session, status);
		
		Long targetCommunityNo = null;
		Long targetUserNo = null;
		
		// 해제되면 방에서 해당 세션 제거하는 코딩할것
		for(Long activedCommunityNo : activedCommunities.keySet()) {
			HashMap<Long, WebSocketSession> activedCommunity = activedCommunities.get(activedCommunityNo);
			for(Long userNo : activedCommunity.keySet()) {
				if(session.equals(activedCommunity.get(userNo))) {
					// 찾은 방번호 저장
					targetCommunityNo = activedCommunityNo;
					// 찾은 유저번호 저장
					targetUserNo = userNo;
				} 
			}
		}
		
		if(null == targetUserNo) {
			// 커뮤니티에 동일한 유저가 접속할때 activedCommunity에서 세션을 찾을 수 없어서 이 조건에 걸림.
			return;
		}
		
		// 커뮤니티 퇴장시 comguest actived_date 날짜 현재시간으로 업데이트
		CommunityGuests communityGuests = communityService.getCommunityGuestsByNo(targetCommunityNo, targetUserNo);
		communityService.updateComGuestActivedDate(communityGuests);
		
		
		if(targetCommunityNo != null && targetUserNo != null) {
			// 방에서 제거
			if(session.equals(activedCommunities.get(targetCommunityNo).get(targetUserNo))) {
				activedCommunities.get(targetCommunityNo).remove(targetUserNo);
			}
		}
		
		// 활성화된 방에서 해당방의 모든  유저 조회
		HashMap<Long, WebSocketSession> usersInCom = activedCommunities.get(targetCommunityNo);
		
		// 활성화방에 유저가 1명이상 있는경우
		if(!usersInCom.isEmpty()) {	
			// 해당방의 유저 조회
			List<CommunityGuestDetail> guests = communityService.getComGuestByNo(targetCommunityNo);
			
			// 해당방에 소속된 모든 세션에게 해당방 세션리스트 내려줄것
			JSONObject obj = new JSONObject();		
			obj.put("type", "remove");
			obj.put("communityGuests", guests);
			
			// 방에 접속한 모든 유저 정보중에서 접속된 유저만 뽑아서 currentUser 리스트에 담아 반환한다.
			List<CommunityGuestDetail> currentUser = new ArrayList<CommunityGuestDetail>();
			for (Long current : usersInCom.keySet()) {
				for(CommunityGuestDetail saved : guests) {
					if(current == saved.getUserNo()) {
						currentUser.add(saved);
					}
				}
			}
			obj.put("currentUser", currentUser);
			
			// 키로 세션하나씩 꺼내서 메세지 전송
			for (Long s : usersInCom.keySet()) {
				WebSocketSession userSession = usersInCom.get(s);
				userSession.sendMessage(new TextMessage(gson.toJson(obj)));
			}
			
			// 활성화방에 아무도 없는경우 => 본인이 마지막이였음 => 커뮤니티 메인으로 이동시키기
		} 
	}
	
	
	
	/**
	 * 웹소켓에 에러발생시 에러메시지 출력하는 메소드
	 * @param session
	 * @param exception
	 * @throws Exception
	 */
	@Override
	public void handleTransportError(WebSocketSession session, Throwable exception) throws Exception {
		exception.printStackTrace();
	}
	
	
	
	/**
	 * 문자열을 JSON오브젝트 객체로 변환해서 반환하는 메소드
	 * @param jsonStr
	 * @return
	 */
	private static JSONObject jsonToObjectParser(String jsonStr) {
		JSONParser parser = new JSONParser();
		JSONObject obj = null;
		try {
			obj = (JSONObject) parser.parse(jsonStr);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		return obj;
	}
	
	
	
	// ################ 동작안하는 코드 -> 바이너리 데이터 송수신 용량 문제로 사용안함, 용량제한 해결된 후 사용할 것 ################
	/*
	 * 브라우저로부터 이미지, 파일 값을 받을 때 실행
	 */
	@Override
	protected void handleBinaryMessage(WebSocketSession session, BinaryMessage message) {
		// @@ 구현할 것
		// 파일과 세션 => 매개변수로 받기
		// 세션아이디와 유저번호 => 메세지로 받기
		// 메세지와 파일과세션은 매개변수의 세션과 메세지의 세션아이디로 식별한다.
		//------------------------------------------------
		// 이미지, 파일 구별해서 등록하는 서비스 실행
		// 세션으로 현재 커뮤니티에 접속한 인원에게 값 내려주기
		// -----------------------------------------------
		// 이 메소드 말고 커뮤니티의 컨텐츠전체 조회하는 로직 수정필요?? 파일도 읽어오긴 할텐데 체크해봐야함.
		// 불러와서 뿌려줄때 일반내용, 파일, 이미지 구별해서 표현해야함
		
		//바이너리 메시지 발송
		ByteBuffer byteBuffer = message.getPayload();
		
		String fileName = "temp.jpg";
		File dir = new File(FILE_UPLOAD_PATH);
		if(!dir.exists()) {
			dir.mkdirs();
		}
		
		File file = new File(FILE_UPLOAD_PATH, fileName);
		FileOutputStream out = null;
		FileChannel outChannel = null;
		try {
			byteBuffer.flip(); //byteBuffer를 읽기 위해 세팅
			out = new FileOutputStream(file, true); //생성을 위해 OutputStream을 연다.
			outChannel = out.getChannel(); //채널을 열고
			byteBuffer.compact(); //파일을 복사한다.
			outChannel.write(byteBuffer); //파일을 쓴다.
		}catch(Exception e) {
			e.printStackTrace();
		}finally {
			try {
				if(out != null) {
					out.close();
				}
				if(outChannel != null) {
					outChannel.close();
				}
			}catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		byteBuffer.position(0); //파일을 저장하면서 position값이 변경되었으므로 0으로 초기화한다.
	}
}
